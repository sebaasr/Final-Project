import openai
import requests
import folium
import pyqrcode


class TripPlanner:
    """
    This class uses OpenAI's GPT model to generate travel suggestions based on a destination.
    """

    def __init__(self, destination):
        self.destination = destination

    def get_suggestions(self):
        """
        Generate travel suggestions from OpenAI GPT based on the destination.
        """
        prompt = f"Give me the best travel tips for a trip to {self.destination}."

        # Make a request to OpenAI's API
        response = openai.Completion.create(
            model="text-davinci-003",
            prompt=prompt,
            max_tokens=100
        )
        return response.choices[0].text.strip()


class WeatherAPI:
    """
    This class interacts with the OpenWeatherMap API to fetch weather data for a given location.
    """

    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "http://api.openweathermap.org/data/2.5/weather"

    def get_weather(self, city):
        """
        Fetch weather data for a given city.
        """
        params = {
            'q': city,
            'appid': self.api_key,
            'units': 'metric'  # To get the temperature in Celsius
        }
        response = requests.get(self.base_url, params=params)
        return response.json()


class MapVisualizer:
    """
    This class uses the Folium library to generate an interactive map of a destination.
    """

    def __init__(self, destination):
        self.destination = destination

    def save_map(self, filename):
        """
        Generate and save an interactive map for the destination.
        """
        # Here we use a simple static location for demonstration purposes.
        # You could integrate a geolocation API to find the actual coordinates.
        location = {
            'Paris': (48.8566, 2.3522),
            'New York': (40.7128, -74.0060),
            'London': (51.5074, -0.1278)
        }.get(self.destination, (0, 0))  # Default to (0, 0) if destination is not found.

        map_obj = folium.Map(location=location, zoom_start=12)
        folium.Marker(location, popup=self.destination).add_to(map_obj)

        map_obj.save(filename)

    def generate_qr_code(self, data, filename):
        """
        Generate and save a QR code image for the given data.
        """
        qr = pyqrcode.create(data)
        qr.png(filename, scale=6)
